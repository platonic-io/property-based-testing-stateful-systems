# Based on https://vrom911.github.io/blog/github-actions-releases

name: Release

on:
  # Trigger the workflow on the new 'v*' tag created.
  push:
    tags:
      - "v*"

jobs:
  create_release:
    name: Create Github release
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Create release
        id: create_release
        uses: actions/create-release@v1.1.4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: true
          prerelease: false

      - name: Output release URL file
        run: echo "${{ steps.create_release.outputs.upload_url }}" > release_url.txt
      - name: Save release URL file for publish
        uses: actions/upload-artifact@v3
        with:
          name: release_url
          path: release_url.txt

  build_artifact:
    needs: [create_release]
    name: ${{ matrix.os }}/GHC ${{ matrix.ghc }}/${{ github.ref }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        ghc:
          - "9.0.2"
        cabal: ["3.6.2.0"]

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set tag name
        uses: olegtarasov/get-tag@v2
        id: tag
        with:
          tagRegex: "v(.*)"
          tagRegexGroup: 1

      - name: Setup Haskell
        uses: haskell/actions/setup@v2.0.1
        id: setup-haskell-cabal
        with:
          ghc-version: ${{ matrix.ghc }}
          cabal-version: ${{ matrix.cabal }}

      - name: Cache ~/.cabal/store
        uses: actions/cache@v3.0.11
        with:
          path: ${{ steps.setup-haskell-cabal.outputs.cabal-store }}
          key: ${{ runner.os }}-${{ matrix.ghc }}-${{ hashFiles('cabal.project.freeze') }}

      - name: Build binary
        run: |
          mkdir dist
          cabal install exe:part5 --install-method=copy --overwrite-policy=always --installdir=dist

      - name: Set binary path name
        run: echo "::set-env name=BINARY_PATH::./dist/part5"

      - name: Compress binary
        uses: svenstaro/upx-action@2.0.1
        with:
          file: ${{ env.BINARY_PATH }}

      - name: Load release URL file from release job
        uses: actions/download-artifact@v3
        with:
          name: release_url

      - name: Get release file name and upload URL
        id: get_release_info
        run: |
          echo "::set-output name=upload_url::$(cat release_url/release_url.txt)"

      - name: Upload release asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release_info.outputs.upload_url }}
          asset_path: ${{ env.BINARY_PATH }}
          asset_name: stan-${{ steps.tag.outputs.tag }}-${{ runner.os }}-ghc-${{ matrix.ghc }}
          asset_content_type: application/octet-stream
